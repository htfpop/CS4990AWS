{"ast":null,"code":"import { EventStreamMarshaller as EventMarshaller } from \"@aws-sdk/eventstream-marshaller\";\nimport { EventStreamMarshaller as UniversalEventStreamMarshaller } from \"@aws-sdk/eventstream-serde-universal\";\nimport { iterableToReadableStream, readableStreamtoIterable } from \"./utils\";\n/**\r\n * Utility class used to serialize and deserialize event streams in\r\n * browsers and ReactNative.\r\n *\r\n * In browsers where ReadableStream API is available:\r\n * * deserialize from ReadableStream to an async iterable of output structure\r\n * * serialize from async iterable of input structure to ReadableStream\r\n * In ReactNative where only async iterable API is available:\r\n * * deserialize from async iterable of binaries to async iterable of output structure\r\n * * serialize from async iterable of input structure to async iterable of binaries\r\n *\r\n * We use ReadableStream API in browsers because of the consistency with other\r\n * streaming operations, where ReadableStream API is used to denote streaming data.\r\n * Whereas in ReactNative, ReadableStream API is not available, we use async iterable\r\n * for streaming data although it has lower throughput.\r\n */\n\nvar EventStreamMarshaller =\n/** @class */\nfunction () {\n  function EventStreamMarshaller(_a) {\n    var utf8Encoder = _a.utf8Encoder,\n        utf8Decoder = _a.utf8Decoder;\n    this.eventMarshaller = new EventMarshaller(utf8Encoder, utf8Decoder);\n    this.universalMarshaller = new UniversalEventStreamMarshaller({\n      utf8Decoder: utf8Decoder,\n      utf8Encoder: utf8Encoder\n    });\n  }\n\n  EventStreamMarshaller.prototype.deserialize = function (body, deserializer) {\n    var bodyIterable = isReadableStream(body) ? readableStreamtoIterable(body) : body;\n    return this.universalMarshaller.deserialize(bodyIterable, deserializer);\n  };\n  /**\r\n   * Generate a stream that serialize events into stream of binary chunks;\r\n   *\r\n   * Caveat is that streaming request payload doesn't work on browser with native\r\n   * xhr or fetch handler currently because they don't support upload streaming.\r\n   * reference:\r\n   * * https://bugs.chromium.org/p/chromium/issues/detail?id=688906\r\n   * * https://bugzilla.mozilla.org/show_bug.cgi?id=1387483\r\n   *\r\n   */\n\n\n  EventStreamMarshaller.prototype.serialize = function (input, serializer) {\n    var serialziedIterable = this.universalMarshaller.serialize(input, serializer);\n    return typeof ReadableStream === \"function\" ? iterableToReadableStream(serialziedIterable) : serialziedIterable;\n  };\n\n  return EventStreamMarshaller;\n}();\n\nexport { EventStreamMarshaller };\n\nvar isReadableStream = function isReadableStream(body) {\n  return typeof ReadableStream === \"function\" && body instanceof ReadableStream;\n};","map":null,"metadata":{},"sourceType":"module"}