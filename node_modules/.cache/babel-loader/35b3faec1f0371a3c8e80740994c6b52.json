{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nexport var loggerMiddleware = function loggerMiddleware() {\n  return function (next, context) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var logger, response, httpResponse;\n\n        var _a;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              logger = context.logger;\n              return [4\n              /*yield*/\n              , next(args)];\n\n            case 1:\n              response = _b.sent();\n\n              if (!logger) {\n                return [2\n                /*return*/\n                , response];\n              }\n\n              httpResponse = response.response;\n\n              if (typeof logger.info === \"function\") {\n                logger.info({\n                  metadata: {\n                    statusCode: httpResponse.statusCode,\n                    requestId: (_a = httpResponse.headers[\"x-amzn-requestid\"]) !== null && _a !== void 0 ? _a : httpResponse.headers[\"x-amzn-request-id\"],\n                    extendedRequestId: httpResponse.headers[\"x-amz-id-2\"],\n                    cfId: httpResponse.headers[\"x-amz-cf-id\"]\n                  }\n                });\n              }\n\n              return [2\n              /*return*/\n              , response];\n          }\n        });\n      });\n    };\n  };\n};\nexport var loggerMiddlewareOptions = {\n  name: \"loggerMiddleware\",\n  tags: [\"LOGGER\"],\n  step: \"initialize\"\n}; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nexport var getLoggerPlugin = function getLoggerPlugin(options) {\n  return {\n    applyToStack: function applyToStack(clientStack) {\n      clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}