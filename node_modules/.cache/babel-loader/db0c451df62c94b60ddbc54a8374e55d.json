{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { LexRuntimeServiceClient } from \"./LexRuntimeServiceClient\";\nimport { DeleteSessionCommand } from \"./commands/DeleteSessionCommand\";\nimport { GetSessionCommand } from \"./commands/GetSessionCommand\";\nimport { PostContentCommand } from \"./commands/PostContentCommand\";\nimport { PostTextCommand } from \"./commands/PostTextCommand\";\nimport { PutSessionCommand } from \"./commands/PutSessionCommand\";\n/**\r\n * <p>Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of\r\n *       operations (API). Your conversational bot uses the runtime API to understand user utterances\r\n *       (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends\r\n *       this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is\r\n *       for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in\r\n *       user conversation on behalf of the bot to elicit required information (slot values, such as\r\n *       pizza size and crust type), and then performs fulfillment activity (that you configured when\r\n *       you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For\r\n *       a list of build-time operations, see the build-time API, . </p>\r\n */\n\nvar LexRuntimeService =\n/** @class */\nfunction (_super) {\n  __extends(LexRuntimeService, _super);\n\n  function LexRuntimeService() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  LexRuntimeService.prototype.deleteSession = function (args, optionsOrCb, cb) {\n    var command = new DeleteSessionCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  LexRuntimeService.prototype.getSession = function (args, optionsOrCb, cb) {\n    var command = new GetSessionCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  LexRuntimeService.prototype.postContent = function (args, optionsOrCb, cb) {\n    var command = new PostContentCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  LexRuntimeService.prototype.postText = function (args, optionsOrCb, cb) {\n    var command = new PostTextCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  LexRuntimeService.prototype.putSession = function (args, optionsOrCb, cb) {\n    var command = new PutSessionCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  return LexRuntimeService;\n}(LexRuntimeServiceClient);\n\nexport { LexRuntimeService };","map":null,"metadata":{},"sourceType":"module"}