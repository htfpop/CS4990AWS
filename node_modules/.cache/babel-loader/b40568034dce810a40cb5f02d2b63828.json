{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n/*\r\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\n\n\nimport { Auth } from '@aws-amplify/auth';\nimport Cache from '@aws-amplify/cache';\nimport { RestAPIClass } from '@aws-amplify/api-rest';\nimport { GraphQLAPIClass } from '@aws-amplify/api-graphql';\nimport { Amplify, ConsoleLogger as Logger, Credentials } from '@aws-amplify/core';\nvar logger = new Logger('API');\n/**\r\n * @deprecated\r\n * Use RestApi or GraphQLAPI to reduce your application bundle size\r\n * Export Cloud Logic APIs\r\n */\n\nvar APIClass =\n/** @class */\nfunction () {\n  /**\r\n   * Initialize API with AWS configuration\r\n   * @param {Object} options - Configuration object for API\r\n   */\n  function APIClass(options) {\n    this.Auth = Auth;\n    this.Cache = Cache;\n    this.Credentials = Credentials;\n    this._options = options;\n    this._restApi = new RestAPIClass(options);\n    this._graphqlApi = new GraphQLAPIClass(options);\n    logger.debug('API Options', this._options);\n  }\n\n  APIClass.prototype.getModuleName = function () {\n    return 'API';\n  };\n  /**\r\n   * Configure API part with aws configurations\r\n   * @param {Object} config - Configuration of the API\r\n   * @return {Object} - The current configuration\r\n   */\n\n\n  APIClass.prototype.configure = function (options) {\n    this._options = Object.assign({}, this._options, options); // Share Amplify instance with client for SSR\n\n    this._restApi.Credentials = this.Credentials;\n    this._graphqlApi.Auth = this.Auth;\n    this._graphqlApi.Cache = this.Cache;\n    this._graphqlApi.Credentials = this.Credentials;\n\n    var restAPIConfig = this._restApi.configure(this._options);\n\n    var graphQLAPIConfig = this._graphqlApi.configure(this._options);\n\n    return __assign(__assign({}, restAPIConfig), graphQLAPIConfig);\n  };\n  /**\r\n   * Make a GET request\r\n   * @param {string} apiName - The api name of the request\r\n   * @param {string} path - The path of the request\r\n   * @param {json} [init] - Request extra params\r\n   * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\r\n   */\n\n\n  APIClass.prototype.get = function (apiName, path, init) {\n    return this._restApi.get(apiName, path, init);\n  };\n  /**\r\n   * Make a POST request\r\n   * @param {string} apiName - The api name of the request\r\n   * @param {string} path - The path of the request\r\n   * @param {json} [init] - Request extra params\r\n   * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\r\n   */\n\n\n  APIClass.prototype.post = function (apiName, path, init) {\n    return this._restApi.post(apiName, path, init);\n  };\n  /**\r\n   * Make a PUT request\r\n   * @param {string} apiName - The api name of the request\r\n   * @param {string} path - The path of the request\r\n   * @param {json} [init] - Request extra params\r\n   * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\r\n   */\n\n\n  APIClass.prototype.put = function (apiName, path, init) {\n    return this._restApi.put(apiName, path, init);\n  };\n  /**\r\n   * Make a PATCH request\r\n   * @param {string} apiName - The api name of the request\r\n   * @param {string} path - The path of the request\r\n   * @param {json} [init] - Request extra params\r\n   * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\r\n   */\n\n\n  APIClass.prototype.patch = function (apiName, path, init) {\n    return this._restApi.patch(apiName, path, init);\n  };\n  /**\r\n   * Make a DEL request\r\n   * @param {string} apiName - The api name of the request\r\n   * @param {string} path - The path of the request\r\n   * @param {json} [init] - Request extra params\r\n   * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\r\n   */\n\n\n  APIClass.prototype.del = function (apiName, path, init) {\n    return this._restApi.del(apiName, path, init);\n  };\n  /**\r\n   * Make a HEAD request\r\n   * @param {string} apiName - The api name of the request\r\n   * @param {string} path - The path of the request\r\n   * @param {json} [init] - Request extra params\r\n   * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\r\n   */\n\n\n  APIClass.prototype.head = function (apiName, path, init) {\n    return this._restApi.head(apiName, path, init);\n  };\n  /**\r\n   * Checks to see if an error thrown is from an api request cancellation\r\n   * @param {any} error - Any error\r\n   * @return {boolean} - A boolean indicating if the error was from an api request cancellation\r\n   */\n\n\n  APIClass.prototype.isCancel = function (error) {\n    return this._restApi.isCancel(error);\n  };\n  /**\r\n   * Cancels an inflight request\r\n   * @param {any} request - request to cancel\r\n   * @return {boolean} - A boolean indicating if the request was cancelled\r\n   */\n\n\n  APIClass.prototype.cancel = function (request, message) {\n    return this._restApi.cancel(request, message);\n  };\n  /**\r\n   * Getting endpoint for API\r\n   * @param {string} apiName - The name of the api\r\n   * @return {string} - The endpoint of the api\r\n   */\n\n\n  APIClass.prototype.endpoint = function (apiName) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this._restApi.endpoint(apiName)];\n      });\n    });\n  };\n  /**\r\n   * to get the operation type\r\n   * @param operation\r\n   */\n\n\n  APIClass.prototype.getGraphqlOperationType = function (operation) {\n    return this._graphqlApi.getGraphqlOperationType(operation);\n  };\n  /**\r\n   * Executes a GraphQL operation\r\n   *\r\n   * @param {GraphQLOptions} GraphQL Options\r\n   * @param {object} additionalHeaders headers to merge in after any `graphql_headers` set in the config\r\n   * @returns {Promise<GraphQLResult> | Observable<object>}\r\n   */\n\n\n  APIClass.prototype.graphql = function (options, additionalHeaders) {\n    return this._graphqlApi.graphql(options, additionalHeaders);\n  };\n\n  return APIClass;\n}();\n\nexport { APIClass };\nexport var API = new APIClass(null);\nAmplify.register(API);","map":null,"metadata":{},"sourceType":"module"}